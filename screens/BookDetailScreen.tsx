// screens/BookDetailScreen.tsx
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  Image,
  Pressable,
  ScrollView,
  Alert,
  TouchableOpacity,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import styles from '../styles/BookDetailScreenStyle';
import HeartIconActive from '../assets/mdi_heart.png';
import HeartIconInactive from '../assets/mdi_heart-outline.png';

export default function BookDetailScreen({ route, navigation }: any) {
  const { book } = route.params || {};
  if (!book) return null;

  const [isFavorite, setIsFavorite] = useState(false);

  // üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Favorite ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
  useEffect(() => {
    const loadFavoriteStatus = async () => {
      try {
        const stored = await AsyncStorage.getItem('favoriteBooks');
        const favorites = stored ? JSON.parse(stored) : [];
        const exists = favorites.some((b: any) => b.id === book.id);
        setIsFavorite(exists);
      } catch (error) {
        console.error('Error loading favorite status:', error);
      }
    };

    loadFavoriteStatus();
  }, [book]);

  // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°
  useEffect(() => {
    const addToHistory = async () => {
      try {
        const stored = await AsyncStorage.getItem('viewHistory');
        const history = stored ? JSON.parse(stored) : [];

        const existingIndex = history.findIndex((b: any) => b.id === book.id);
        if (existingIndex >= 0) {
          history[existingIndex].viewedAt = new Date().toISOString();
        } else {
          history.push({ ...book, viewedAt: new Date().toISOString() });
        }

        await AsyncStorage.setItem('viewHistory', JSON.stringify(history));
      } catch (error) {
        console.error('Error saving view history:', error);
      }
    };

    addToHistory();
  }, [book]);

  // üîπ ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Favorite
  const toggleFavorite = async () => {
    try {
      const stored = await AsyncStorage.getItem('favoriteBooks');
      const favorites = stored ? JSON.parse(stored) : [];

      let updatedFavorites;
      if (isFavorite) {
        updatedFavorites = favorites.filter((b: any) => b.id !== book.id);
      } else {
        updatedFavorites = [...favorites, book];
      }

      await AsyncStorage.setItem('favoriteBooks', JSON.stringify(updatedFavorites));
      setIsFavorite((prev) => !prev);

      Alert.alert(
        '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î',
        isFavorite ? '‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏•‡πâ‡∏ß'
      );
    } catch (error) {
      console.error('Favorite toggle error:', error);
    }
  };

  // üîπ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏°
  const handleBorrow = async () => {
    const borrowDate = new Date();
    const dueDate = new Date();
    dueDate.setDate(borrowDate.getDate() + 7);

    const thaiMonths = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°','‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå','‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°','‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô','‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°','‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°','‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°','‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô','‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°','‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô','‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];
    const day = dueDate.getDate();
    const month = thaiMonths[dueDate.getMonth()];
    const year = dueDate.getFullYear() + 543;
    const hours = dueDate.getHours().toString().padStart(2,'0');
    const minutes = dueDate.getMinutes().toString().padStart(2,'0');
    const dueDateStr = `${day} ${month} ${year} ‡πÄ‡∏ß‡∏•‡∏≤ ${hours}:${minutes} ‡∏ô.`;

    Alert.alert(
      '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      `${book.title}\n\n‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô\n${dueDateStr}`,
      [
        { text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: 'destructive' },
        {
          text: '‡∏ï‡∏Å‡∏•‡∏á',
          onPress: async () => {
            try {
              // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
              const storedShelf = await AsyncStorage.getItem('bookshelf');
              const shelf = storedShelf ? JSON.parse(storedShelf) : [];
              if (!shelf.some((b: any) => b.id === book.id)) {
                shelf.push(book);
                await AsyncStorage.setItem('bookshelf', JSON.stringify(shelf));
              }

              // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å borrowHistory
              const storedHistory = await AsyncStorage.getItem('borrowHistory');
              const history = storedHistory ? JSON.parse(storedHistory) : [];

              const newBorrow = {
                ...book,
                borrowDate: borrowDate.toISOString(),
                dueDate: dueDate.toISOString(),
                extended: false,
              };

              history.push(newBorrow);
              await AsyncStorage.setItem('borrowHistory', JSON.stringify(history));

              Alert.alert('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
              navigation.goBack();
            } catch (error) {
              console.error('Error borrowing book:', error);
            }
          },
        },
      ],
      { cancelable: true }
    );
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.genre}>{book.genre}</Text>
      <Image source={{ uri: book.cover }} style={styles.cover} />
      <Text style={styles.title}>{book.title}</Text>
      <Text style={styles.authorPublisher}>
        ‡πÇ‡∏î‡∏¢ {book.author} | {book.publisher}
      </Text>

      <Pressable style={styles.borrowBtn} onPress={handleBorrow}>
        <Text style={styles.borrowText}>‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏µ‡πâ</Text>
      </Pressable>

      <View style={styles.statsContainer}>
        <View style={styles.statItem}>
          <Text style={styles.statLabel}>‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</Text>
          <Text style={[styles.statNumber, styles.available]}>{book.available}</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statLabel}>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
          <Text style={[styles.statNumber, styles.total]}>{book.total}</Text>
        </View>
        <View style={styles.statItem}>
          <Text style={styles.statLabel}>‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡πâ‡∏ß</Text>
          <Text style={[styles.statNumber, styles.borrowed]}>{book.borrowed}</Text>
        </View>
      </View>

      <View style={styles.separator} />

      <View style={styles.summaryHeader}>
        <Text style={styles.summaryTitle}>‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠</Text>
        <TouchableOpacity style={styles.favoriteContainer} onPress={toggleFavorite}>
          <Image
            source={isFavorite ? HeartIconActive : HeartIconInactive}
            style={styles.favoriteIcon}
          />
          <Text style={styles.favoriteText}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î</Text>
        </TouchableOpacity>
      </View>

      <Text style={styles.summaryText}>{book.summary}</Text>
    </ScrollView>
  );
}
